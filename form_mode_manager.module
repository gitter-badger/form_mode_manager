<?php

/**
 * @file
 * Contains form_mode_manager.module.
 */

use Drupal\Core\Render\Element;

/**
 * Implements hook_entity_type_alter().
 */
function form_mode_manager_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityDisplayRepository $entity_display */
  $entity_display = \Drupal::service('entity_display.repository');
  /* @var \Drupal\Core\Entity\EntityTypeInterface $entity */
  foreach ($entity_types as $entity_type => $entity) {
      // @TODO Purpose possibility to handle that to define a custom entity FormClass.
      $default_handler_class = $entity->getHandlerClasses()['form']['default'];
      $display_modes = $entity_display->getFormModes($entity_type);
      foreach ($display_modes as $machine_name => $display_mode) {
        if (!isset($display_mode['_core'])) {
          $entity->setFormClass($machine_name, $default_handler_class)
            ->setLinkTemplate($machine_name, '/' . $entity_type . '/{' . $entity_type . '}/' . $machine_name);
        }
      }
    }
}

/**
 * Implements hook_entity_operation().
 */
function form_mode_manager_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  $operations = [];
  $form_modes = \Drupal::service('entity_display.repository')->getAllFormModes();
  foreach ($form_modes as $entity_type => $display_modes) {
    foreach ($display_modes as $key => $display_mode) {
      if(!isset($display_mode['_core'])) {
        if ($entity->getEntityTypeId() === $entity_type) {
          $operations += [
            $key => [
              'title' => t('Edit as @label', ['@label' => $display_mode['label']])->render(),
              'url' => $entity->toUrl($key),
              'weight' => 0,
            ],
          ];
        }
      }
    }
  }

  return $operations;
}
